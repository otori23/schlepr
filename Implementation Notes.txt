- put controllers & services in a different module; load when main module
- jumbotron is not in the header it is in content
- jumbotron look some thing like confusion's jumbotron but use the hand/box logo

<header> -> look @ twitter's header
<content> -> cards (cards show summary; clicking on cards show modal with more details; can add comments)
<footer>

- use mongoose validation to implement the server-side validation of all form data
(add client size validation later)

- nav toggle menu on small screens: use media query to hide and show the apporpriate list items
- clean-up the jumbotron section
- login/logout information should be global - run the event handlers globally and not in each controller (see the ionic project as an example)
- using the refresh button on the browser is wonky; app thinks I have logged out; takes me to login page with password filled in ??? What is going on here ???

1) Users

- how to login in user on succesful registration; is this done from client side ? See instructor's code
- how to logout when using jwt; is this done by front-end client ? See instructor's code
- add a schlepr user; and maybe redesign the way the verify middlewares are used
- still look to explore passport built-in in method for verify or protecting routes
- test the User's getName method; is User.methods === User.prototype ???

2) MongoDB

- the schlepr database shows up in the database server after your application has inserted at least one document into one collection

3) $resource

// returns a resource class object
$resource('/api/entries/:id');

// Entry in a resource class object (injected into controller)
// note: return value of .get() is assigned to a var; so no need to get the return value in the .get() callback 
// var entry: think of as instance of Entry class; a representation of server side Mongo document
var entry = Entry.get({ id: $scope.id }, function() {
  console.log(entry);
});

// create an intanse of the Entry class
// document is empty at this point
$scope.entry = new Entry();

// two ways of getting a return value from call to $resource methods

// no arg passsed into the callback
var entry = Entry.get({ id: $scope.id }, function() {
  console.log(entry);
});

// from callback
// no arg passsed into the callback
Entry.get({ id: $scope.id }, function(data) {
  $scope.entry = data;
});

4) Header

- try again to add "remember me" checkbox
- login and registration form validation; something basic; re-enter password ?
- change on successfull login; with ability to logout (ng-if vs ng-show ?)
- on bad login where is the 401 message being printed to console ? from ui-bootstrap modal ? see docs, maybe option to stop logs ?
- confirm that registering new users will work
- what is going on with $state ? angular-ui or angular core ?
- commit to git

4a) ui-bootstrap.modal

- had trouble getting google places and moment date picker to work well with the modal
- google places: had to use custom CSS to set z-index for modal and its backdrop (make lower so can see other things on top of it)
- moment.js date/time picker : just could not get this to show properly; so used a standard html5 input type <input type="datetime-local">
- because I messed with the z-roder of the "Add Request" modal, had to use top margin to move it down some so that it is not covered by nav-bar

5) $log

app.config(function($logProvider) {
  $logProvider.debugEnabled(true);
});

6) Logo

Google search: "hand outline holding box"

disable all logs at once, rather than delete them line by line manually.

7) Packages Router

- on some of the endpoints verify that a user can actually perform the aciton; e.g. delete or update only their own posts; see .delete of: '/:packageId/comments/:commentId'

8) Place
https://gist.github.com/VictorBjelkholm/6687484
http://ngmodules.org/modules/ngAutocomplete

- what to store: just string from textbox; the detail contains lng/lat data what to do with this ?
- what are implications of using google places api without an api key ?

<input type="text" id="Autocomplete2" class="form-control" ng-autocomplete ng-model="package.adderss" details="package.details"/>

9) Date (& Time)
http://indrimuska.github.io/angular-moment-picker/
- probably just use the ui-bootstrap version
- nah ended up using moment.js
- moment().toDate();

10) Images
https://stackoverflow.com/questions/4796914/store-images-in-a-mongodb-database
http://ngmodules.org/modules/ng-file-upload

10a) What does enctype='multipart/form-data' mean in an HTML form and when should we use it?
https://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean

<form action="/" method="post" enctype="multipart/form-data">

When you make a POST request, you have to encode the data that forms the body of the request in some way.

HTML forms provide three methods of encoding.

application/x-www-form-urlencoded (the default)
multipart/form-data
text/plain

Work was being done on adding application/json, but that has been abandoned.

The specifics of the formats don't matter to most developers. The important points are:

When you are writing client-side code, all you need to know is use multipart/form-data when your form includes any <input type="file"> elements.

When you are writing server-side code: Use a prewritten form handling library (e.g. Perl's CGI->param or the one exposed by PHP's $_POST superglobal) and it will take care of the differences for you. Don't bother trying to parse the raw input received by the server.

Never use text/plain.

10b) Multer - middleware for handling multipart/form-data
https://www.npmjs.com/package/multer

10c) Store/display an image in mongodb using mongoose/express
https://gist.github.com/aheckmann/2408370

10d) MongoDB - GridFS
https://docs.mongodb.com/manual/core/gridfs/

- specification for storing and retrieving files that exceed the BSON-document size limit of 16 MB
- see docs for when it is appropriate to use
- maybe use only in cases where documents are bigger than 16 MB
(for app limiting image to <= 5MB)

10e) gridfs-stream - Easily stream files to and from MongoDB GridFS.
https://github.com/aheckmann/gridfs-stream

- read entire doc to understand how to use

10e.1) How To Upload Images to MongoDB using Express/Imgur clone
https://dinosaurscode.xyz/nodejs/2016/04/12/how-to-upload-images-to-mongodb-using-express/

- uses gridfs stream in example
- note: no mongoose at this point

10#) mongoose-gridfs - builds in gridfs-stream
https://github.com/lykmapipo/mongoose-gridfs

- wrap gridfs-stream to provide valid mongoose schema and model to use with MongoDB GridFS
- incorporates the Mongoose layer
- read full doc to understand how to use it

11) Web Components - https://www.webcomponents.org/introduction

- see section @ bottom listing all other web component libraries/tools

12) Directives and Components

- writing angular 1.6 directives ?

13) Mongoose Schema Built-in required validator

- failing required validation sends back an html response "500 Internal Server Error"; can't show another modal.

14) Displaying Posts

- Bootstrap 3 Blog Template Example + Medial List

Middle Dot (&#183;) - https://www.toptal.com/designers/htmlarrows/punctuation/middle-dot/

15) 'resolve' in stateProvider

- seems to have been broken in Angular 1.6; how can we fix this ?

https://github.com/angular/angular.js/issues/15545
https://github.com/angular/angular.js/blob/master/CHANGELOG.md
(search for phrase: "If you don't have time to migrate the code at the moment")